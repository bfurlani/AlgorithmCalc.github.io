{"version":3,"sources":["components/mergesort-page.js","components/quicksort-page.js","components/home.js","components/insertionsort-page.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["MergeSortPage","props","QuickSortPage","useState","qsStarted","setQsStarted","calls","setCalls","iterations","setIterations","class","style","width","type","id","name","value","onClick","callNum","itrNum","array","document","getElementById","getArray","split","elm","getElementsByName","i","length","checked","getRadioOutput","numberedArray","forEach","str","push","parseInt","quickSort","arr","low","high","String","pi","pivot","j","partition","map","call","itr","startQS","Home","InsertionSortPage","isStarted","setIsStarted","current","insertionSort","startIS","routes","App","routeResult","useRoutes","Routes","fontSize","position","marginLeft","marginTop","href","onMouseOver","displayList","onMouseOut","removeListFromView","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fad5cece.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction MergeSortPage(props) {\r\n  return <h3>MergeSort</h3>;\r\n}\r\n\r\nexport default MergeSortPage;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/qs.css\";\r\nfunction QuickSortPage(props) {\r\n  const [requested, setRequested] = useState(() => {\r\n    return \"none\";\r\n  });\r\n  const [array, setArray] = useState(() => {\r\n    return \"1\";\r\n  });\r\n  const [qsStarted, setQsStarted] = useState(() => {\r\n    return false;\r\n  });\r\n  const [calls, setCalls] = useState(() => {\r\n    return [];\r\n  });\r\n  const [callNumber, setCallNumber] = useState(() => {\r\n    return 0;\r\n  });\r\n  const [iterations, setIterations] = useState(() => {\r\n    return [];\r\n  });\r\n  const [itrNumber, setItrNumber] = useState(() => {\r\n    return 0;\r\n  });\r\n\r\n  return (\r\n    <div class=\"qsmain\">\r\n      <h3>Quick Sort:</h3>\r\n      <br />\r\n      <p>\r\n        To start, please enter the array(do not include brackets and select the\r\n        seperation character) and the solution you are looking for:\r\n      </p>\r\n      <input\r\n        style={{ width: \"150px\" }}\r\n        type=\"text\"\r\n        class=\"qsArr\"\r\n        id=\"qsArray\"\r\n      ></input>\r\n      <div class=\"speratorSelction\">\r\n        <span>Select Array Serperator</span>\r\n        <br />\r\n        <form>\r\n          <input name=\"select\" id=\"select\" type=\"radio\" value=\",\"></input>\r\n          <span>,</span>\r\n          <br />\r\n          <input name=\"select\" id=\"select\" type=\"radio\" value=\" \"></input>\r\n          <span>Space</span>\r\n          <br />\r\n          <input name=\"select\" id=\"select\" type=\"radio\" value=\"\"></input>\r\n          <span>No Space</span>\r\n        </form>\r\n      </div>\r\n      <button class=\"resetQS\" onClick={() => resetQS()}>\r\n        Reset QS\r\n      </button>\r\n      <button class=\"startQS\" onClick={() => setQsStarted(true)}>\r\n        Start QS\r\n      </button>\r\n      {startQS()}\r\n    </div>\r\n  );\r\n\r\n  function resetQS() {\r\n    setQsStarted(false);\r\n    setCalls([]);\r\n    setIterations([]);\r\n  }\r\n  function getRadioOutput() {\r\n    var elm = document.getElementsByName(\"select\");\r\n    for (var i = 0; i < elm.length; i++) {\r\n      if (elm[i].checked) {\r\n        return elm[i].value;\r\n      }\r\n    }\r\n  }\r\n\r\n  function startQS() {\r\n    var callNum = 1;\r\n    var itrNum = 1;\r\n    if (qsStarted === true) {\r\n      var array = getArray().split(getRadioOutput());\r\n      var numberedArray = [];\r\n      array.forEach((str) => {\r\n        numberedArray.push(parseInt(str));\r\n      });\r\n      quickSort(numberedArray, 0, numberedArray.length - 1);\r\n      return (\r\n        <div class=\"qsSolutions\">\r\n          <div id=\"qsCalls\" class=\"displaySetting\">\r\n            <div>Calls</div>\r\n            {calls.map((call) => {\r\n              //setCallNumber((prevCall) => prevCall + 1);\r\n              return (\r\n                <div>\r\n                  <span>\r\n                    {callNum++}: {call}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div id=\"spacer\" class=\"displaySetting\"></div>\r\n          <div id=\"qsIter\" class=\"displaySetting\">\r\n            <div>Iterations</div>\r\n            {iterations.map((itr) => {\r\n              //setItrNumber((prevItr) => prevItr + 1);\r\n              return (\r\n                <div>\r\n                  <span>\r\n                    {itrNum++}: {itr}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function getArray() {\r\n    if (qsStarted) {\r\n      return document.getElementById(\"qsArray\").value;\r\n    }\r\n  }\r\n\r\n  // function quickSort(origArray) {\r\n  //   if (origArray.length <= 1) {\r\n  //     return origArray;\r\n  //   } else {\r\n  //     var left = [];\r\n  //     var right = [];\r\n  //     var newArray = [];\r\n  //     var pivot = origArray.pop();\r\n  //     var length = origArray.length;\r\n\r\n  //     for (var i = 0; i < length; i++) {\r\n  //       if (origArray[i] <= pivot) {\r\n  //         left.push(origArray[i]);\r\n  //       } else {\r\n  //         right.push(origArray[i]);\r\n  //       }\r\n  //     }\r\n\r\n  //     return newArray.concat(quickSort(left), pivot, quickSort(right));\r\n  //   }\r\n  // }\r\n\r\n  function partition(arr, low, high) {\r\n    calls.push(`P(${low},${high})`);\r\n    var i = low - 1;\r\n    var pivot = arr[high];\r\n    for (var j = low; j < high; j++) {\r\n      if (arr[j] < pivot) {\r\n        i = i + 1;\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      }\r\n    }\r\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n    return i + 1;\r\n  }\r\n\r\n  function quickSort(arr, low, high) {\r\n    calls.push(`QS(${low},${high})`);\r\n    iterations.push(String(arr));\r\n    if (low < high) {\r\n      var pi = partition(arr, low, high);\r\n      quickSort(arr, low, pi - 1);\r\n      quickSort(arr, pi + 1, high);\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuickSortPage;\r\n","import { A } from \"hookrouter\";\r\nimport React, { Component } from \"react\";\r\nimport \"../styles/home.css\";\r\nfunction Home(props) {\r\n  return (\r\n    <div class=\"home\">\r\n      <h3>Welcome!</h3>\r\n      <p>Please choose an algorithm to get started</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/is.css\";\r\nfunction InsertionSortPage(props) {\r\n  const [requested, setRequested] = useState(() => {\r\n      return \"none\";\r\n    });\r\n    const [array, setArray] = useState(() => {\r\n      return \"1\";\r\n    });\r\n    const [isStarted, setIsStarted] = useState(() => {\r\n      return false;\r\n    });\r\n    const [calls, setCalls] = useState(() => {\r\n      return [];\r\n    });\r\n    const [callNumber, setCallNumber] = useState(() => {\r\n      return 0;\r\n    });\r\n    const [iterations, setIterations] = useState(() => {\r\n      return [];\r\n    });\r\n    const [itrNumber, setItrNumber] = useState(() => {\r\n      return 0;\r\n    });\r\n\r\n    return (\r\n      <div class=\"ismain\">\r\n        <h3>Insertion Sort:</h3>\r\n        <br />\r\n        <p>\r\n          To start, please enter the array(do not include brackets and select the\r\n          seperation character) and the solution you are looking for:\r\n        </p>\r\n        <input\r\n          style={{ width: \"150px\" }}\r\n          type=\"text\"\r\n          class=\"isArr\"\r\n          id=\"isArray\"\r\n        ></input>\r\n        <div class=\"speratorSelction\">\r\n          <span>Select Array Serperator</span>\r\n          <br />\r\n          <form>\r\n            <input name=\"select\" id=\"select\" type=\"radio\" value=\",\"></input>\r\n            <span>,</span>\r\n            <br />\r\n            <input name=\"select\" id=\"select\" type=\"radio\" value=\" \"></input>\r\n            <span>Space</span>\r\n            <br />\r\n            <input name=\"select\" id=\"select\" type=\"radio\" value=\"\"></input>\r\n            <span>No Space</span>\r\n          </form>\r\n        </div>\r\n        <button class=\"resetIS\" onClick={() => resetIS()}>\r\n          Reset IS\r\n        </button>\r\n        <button class=\"startIS\" onClick={() => setIsStarted(true)}>\r\n          Start IS\r\n        </button>\r\n        {startIS()}\r\n      </div>\r\n    );\r\n\r\n    function resetIS() {\r\n      setIsStarted(false);\r\n      setCalls([]);\r\n      setIterations([]);\r\n    }\r\n    function getRadioOutput() {\r\n      var elm = document.getElementsByName(\"select\");\r\n      for (var i = 0; i < elm.length; i++) {\r\n        if (elm[i].checked) {\r\n          return elm[i].value;\r\n        }\r\n      }\r\n    }\r\n\r\n    function startIS() {\r\n      var callNum = 1;\r\n      var itrNum = 1;\r\n      if (isStarted === true) {\r\n        var array = getArray().split(getRadioOutput());\r\n        var numberedArray = [];\r\n        array.forEach((str) => {\r\n          numberedArray.push(parseInt(str));\r\n        });\r\n        insertionSort(numberedArray, 0, numberedArray.length - 1);\r\n        return (\r\n          <div class=\"isSolutions\">\r\n            <div id=\"isCalls\" class=\"displaySetting\">\r\n              <div>Calls</div>\r\n              {calls.map((call) => {\r\n                //setCallNumber((prevCall) => prevCall + 1);\r\n                return (\r\n                  <div>\r\n                    <span>\r\n                      {callNum++}: {call}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div id=\"spacer\" class=\"displaySetting\"></div>\r\n            <div id=\"isIter\" class=\"displaySetting\">\r\n              <div>Iterations</div>\r\n              {iterations.map((itr) => {\r\n                //setItrNumber((prevItr) => prevItr + 1);\r\n                return (\r\n                  <div>\r\n                    <span>\r\n                      {itrNum++}: {itr}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    function getArray() {\r\n      if (isStarted) {\r\n        return document.getElementById(\"isArray\").value;\r\n      }\r\n    }\r\n\r\n    function insertionSort(arr, low, high) {\r\n      for (let i = 1; i < arr.length; i++) {\r\n        let current = arr[i];\r\n        let j;\r\n        for(j=i-1; j >= 0 && arr[j] > current;j--) {\r\n        arr[j + 1] = arr[j] }\r\n        arr[j + 1] = current;\r\n        iterations.push(String(arr));\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n\r\nexport default InsertionSortPage;","import React from \"react\";\r\n\r\nimport MergeSortPage from \"./components/mergesort-page\";\r\nimport QuickSortPage from \"./components/quicksort-page\";\r\nimport Home from \"./components/home\";\r\nimport InsertionSortPage from \"./components/insertionsort-page\";\r\n\r\nconst routes = {\r\n  \"/\": () => <Home />,\r\n  \"/quicksort\": () => <QuickSortPage />,\r\n  \"/mergesort\": () => <MergeSortPage />,\r\n  \"/heapsort\": () => <MergeSortPage />,\r\n  \"/insertionsort\": () => <InsertionSortPage />,\r\n};\r\n\r\nexport default routes;\r\n","import { useRoutes, A } from \"hookrouter\";\r\nimport React from \"react\";\r\nimport \"./styles/home.css\";\r\nimport Routes from \"./routes\";\r\n\r\nfunction App() {\r\n  const routeResult = useRoutes(Routes);\r\n  return (\r\n    <div class=\"Nav\">\r\n      <span\r\n        style={{\r\n          fontSize: \"35px\",\r\n          position: \"absolute\",\r\n          marginLeft: \"10px\",\r\n          marginTop: \"10px\",\r\n        }}\r\n      >\r\n        Algorithm Calculator\r\n      </span>\r\n      <div class=\"NavBtns\">\r\n        <button class=\"homeBtn\">\r\n          <a href=\"/\">Home</a>\r\n        </button>\r\n        <button\r\n          onMouseOver={() => displayList(\"sortingContainer\")}\r\n          onMouseOut={() => removeListFromView(\"sortingContainer\")}\r\n          class=\"Sorting\"\r\n        >\r\n          <span>Sorting</span>\r\n        </button>\r\n        <div\r\n          id=\"sortingContainer\"\r\n          onMouseOver={() => displayList(\"sortingContainer\")}\r\n          onMouseOut={() => removeListFromView(\"sortingContainer\")}\r\n        >\r\n          <button>\r\n            <a href=\"/quicksort\">QuickSort</a>\r\n          </button>\r\n          <br />\r\n          <button>\r\n            <a href=\"/mergesort\">MergeSort</a>\r\n          </button>\r\n          <br />\r\n          <button>\r\n            <a href=\"/insertionsort\">InsertionSort</a>\r\n          </button>\r\n          <br />\r\n        </div>\r\n        <button class=\"sudoInt\">Sudo Interpretter</button>\r\n      </div>\r\n      {routeResult}\r\n    </div>\r\n  );\r\n\r\n  function displayList(id) {\r\n    document.getElementById(id).style.top = \"unset\";\r\n  }\r\n  function removeListFromView(id) {\r\n    document.getElementById(id).style.top = \"-1000px\";\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}